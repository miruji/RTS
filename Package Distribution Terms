                 RTS Package Distribution Terms
                       Version 11.11.2024

An RTS package, hereinafter referred to simply as the Package, 
is code written in the RTS programming language, as well as 
documentation and other software files distributed by users of 
the RTS programming language. All package files should be related 
to the operation of the package itself, avoiding unnecessary files.

The RTS Package Manager, hereinafter simply referred to as 
the Package Manager, is a module of the RTS programming language 
that allows users are free to distribute their packages and share 
them with others. In turn, the authors and developers of the 
RTS programming language do not bear any responsibility for 
the code of distributed user packages, their support, possible 
financial transactions, licensing and everything else. The only 
thing the RTS programming language focuses on in this regard is 
the timely moderation of dangerous code that poses a threat 
to others, as well as the creation of a free platform for 
distributing packages in the RTS programming language.

The package manager adheres to the principle of releasing stable, 
hot versions. This also means that if necessary For other functions, 
you have the right to use other services to develop packages.

    When creating a package you should take into account

1. Package Name Formatting:

   i. The package name should be short but descriptive and more 
      than 2 characters long;

  ii. The first character is always a letter;

 iii. Use letters of any case of the English alphabet, as well 
      as numbers and other characters;

  iv. Use hyphens to separate words if necessary (for example, 
      rts-package-example); Or you can use other approaches 
      (for example, rstPackageExample);

2. Package Description:

   i. Each package must be accompanied by at least a brief 
      description of its purpose and functionality in English;

  ii. For a more detailed description, refer to other sources 
      or the code of your package.

3. Versioning:

   i. Follow the approach of hot stable versions. To do this, 
      simply use YYMMDD.Revision;

  ii. This will allow you to clearly determine the date of 
      the last change and will be more informative than 
      the regular version.

4. Dependencies:

   i. Provide required dependencies so that users can easily 
      install your package;

  ii. Use the most accurate versions possible for dependencies, 
      this is important for the stability of your package.

5. Verification and Compatibility:

   i. Provide required dependencies so that users can easily 
      install your package;

  ii. Use the most accurate versions possible for dependencies, 
      this is important for the stability of your package.

             Additionally, you can organize

1. Documentation and tests:

   i. Documentation that explains how to install and use 
      the package is welcome;

  ii. Add tests or examples of work so that other developers 
      can understand the functionality of the package.

2. License and copyright:

   i. Specify the license under which your package is 
      distributed. We would recommend using the 
      Free Contribution License to allow the package to be 
      freely distributed and supported by other developers.

3. Updates:

   i. Update packages regularly, especially if bugs or 
      improvements are found;

  ii. Upgrade the version if there are significant changes 
      in functionality or dependencies.

4. Support and contacts:

   i. Provide contact information or links to package support 
      pages so users can ask questions or provide feedback.